// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// nbloader/nbloader.dll
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nbloaderNbloaderDll = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x6f\x6c\x1c\xc5\xdd\xc7\x3f\xb3\x7b\x77\x3e\x5f\xe2\x23\xe7\x24\xce\x11\x62\x72\x21\x98\xc7\x4f\x0c\xf7\xd8\x84\x3c\x10\x08\x4d\x6c\x9f\x1d\xae\x38\xb6\xeb\x33\x0e\x20\x35\xce\xde\xdd\xe6\xb2\xb0\xb7\x7b\xd9\xdd\x0b\x39\x40\x21\xad\xd4\x0a\x68\x4b\xa1\x42\x48\x85\x56\x6a\x03\x2f\xa8\x54\xb5\xfc\x53\x81\x4a\x95\xa8\x54\x54\xc9\x12\x15\x52\x55\xf5\x1d\xa2\xaf\xd2\x77\xa8\xaa\xaa\x46\x55\x85\xab\x99\x5d\x9f\x2f\xb6\x0b\xf4\x45\xc5\x8b\x76\xce\x9e\x99\xdf\x77\x7e\x7f\xbe\xf3\xdb\x99\xd9\x9d\x63\xf7\x3f\x8d\x0e\xc4\x80\xe5\x65\x78\x8b\xb0\x1c\xe1\xd3\xcb\x05\x20\xbd\xfb\xe7\x69\xde\xe8\x7e\x6f\xcf\x5b\x62\xea\xbd\x3d\xf3\xa7\x2d\x3f\xd7\xf0\xdc\x9a\x67\xd4\x73\x15\xc3\x71\xdc\x20\x57\x36\x73\x5e\xd3\xc9\x59\x4e\xae\x30\x53\xca\xd5\xdd\xaa\x99\xef\xe9\x49\x5d\x1f\xf9\x98\x9d\x80\x29\xa1\xb3\x14\xff\xe3\xbb\x2b\x7e\x3f\xe4\xba\xdc\x26\x31\x0c\x9b\x81\x44\x88\x3d\x3f\x04\xe4\xda\xc4\xb6\xa8\xbe\x16\xf2\x86\xd5\x56\x91\xd2\xc2\xae\xce\xc9\xaf\x49\x55\xf9\xb7\xda\xb6\x1b\x55\xee\x1a\x82\x99\x68\xc2\xbb\xf4\x0d\x26\x79\x32\xa4\x71\xe3\x10\xec\xfa\x0c\x39\x69\x97\x1c\x24\x3b\xc4\x64\x0e\xee\xea\x90\xf3\x81\x79\x2e\x00\x7e\xb0\x29\x9a\xd7\xe6\x55\xde\x1d\x2e\x4e\xe6\x3d\xdf\xab\x10\x71\x3b\x12\x4d\x34\x7d\xa5\xde\x11\x38\x92\xf7\x4c\xdb\xad\x84\x6e\x24\x67\xe5\xab\x77\x9d\xde\xd8\x5a\x9a\x8f\x0e\x45\x79\x50\x26\x71\xb6\x5d\x07\xd9\x6e\x10\xff\xca\x5c\x3b\xca\xcf\x06\x37\x41\x6a\xdb\xc7\x09\x1d\x12\xfe\x66\x48\xb9\x3d\x90\x5a\x41\x63\x12\x4d\x4b\xf4\x2a\x48\xed\xbb\x56\x1b\xdc\x22\x5b\xd8\x3a\x1c\xe3\x65\x54\xdc\xcc\xf9\x18\xc4\x52\x7d\x9b\x6e\x7b\x5a\x3e\xff\xae\xe7\x37\x27\x3d\x01\x8d\xc1\x0c\xa4\x6e\x7a\x24\x39\xd8\x2b\xdb\xde\xf3\xf2\xe9\x7b\x3a\x34\x92\x83\x5b\x21\x35\x24\x92\x3d\xba\xbb\x0d\x52\x03\x37\x25\x6e\x50\x16\x5b\x63\xbb\xbe\x95\x01\x31\xd0\xd7\x7d\x71\x60\x87\xd2\xbd\x38\x90\xcd\xc4\x2e\x0e\x5c\x1d\x09\x3b\x75\x77\x3b\xa4\x2e\x0e\x5c\xe3\x75\x49\x60\xb0\x4f\x92\xdd\x01\xa9\xad\xf1\x4c\x7c\x30\x0b\xa9\x1b\xbb\xb5\x4c\xdc\xbd\x5a\xd2\xec\xda\x71\xef\xa6\xae\xc4\x53\xd6\xe1\xda\xf2\xf2\xf2\xb6\x7d\x5b\x87\x75\xec\x30\xd5\x6d\xce\x43\x0b\x6b\x09\x8f\x7e\x02\x61\x25\xe9\x4a\x52\x41\x7b\xba\xc3\x90\x3d\xdd\xbd\xb1\xc1\x9d\xb2\xa7\x67\x62\xed\xb0\x37\xbf\x74\xfe\x1a\x49\x43\xc6\x9d\x8f\xf2\xed\x65\xa0\x71\x41\x40\x6c\x70\x57\xe7\xd4\x2f\xc8\x60\xe7\x15\xde\xaf\xf0\xd8\x0d\xdb\x86\xe2\xee\xb5\x57\xe8\xe8\x52\x47\x56\xbb\xef\xe8\x73\x77\x43\xea\x82\x9c\xc5\xbe\xb1\xd2\x17\xc7\x44\xb4\x02\xe4\x7a\x3a\x7b\x4b\x7e\x38\xbf\x7f\x78\xff\xc8\x41\x89\xc4\xd5\x9c\x2f\x6b\xb0\xf7\x3c\x54\x75\xd8\x1c\x83\xbd\xa5\xc0\xb3\x9c\x9a\x2f\x35\x1a\x5d\x70\x0b\xb0\xf7\x9e\x12\x2f\x75\x85\xfb\x6d\xef\xd1\x7b\x8a\x05\xe0\x8d\x2e\xa8\x0a\xd8\x3b\x66\xbb\xe5\x68\x0e\x1a\x88\xe3\xdb\xb5\x64\xb7\x14\xfe\x26\xf6\xd3\x17\xae\xbf\x1d\x6a\x0f\x87\x4b\x3e\x1e\xb5\xbb\x81\x54\xb4\xbc\xb5\x70\xbd\xa8\x31\x38\xa4\x85\x8c\x13\x14\xc5\x0e\x3d\xc1\x0b\xaa\x7e\x91\x0f\xb4\xab\xb8\x55\xae\x46\x7e\xc3\xaf\x44\x82\xaf\x8a\x13\x5a\x82\x7d\xaa\xbe\x84\xac\x63\xaa\x6f\xa9\xfa\x4d\x85\x7c\x45\x3f\xae\x25\xf8\xa5\x7e\x42\x4b\xf1\xbc\xde\xd4\x12\x78\x0a\x17\x48\xfc\x43\x71\x5c\x4b\x93\xd1\xfa\xe9\x65\x9e\x7e\xfa\xf8\xad\x7e\x59\x4b\xf0\x7b\x4d\x8e\xfe\x44\xd9\x9e\xd4\x8f\xab\xdd\x1c\x9e\x01\x61\x36\xb7\xd0\xa7\xc1\x88\x92\x2e\x88\x2d\x7c\x43\x5b\xd6\xa5\xa4\x33\xc2\x4e\x7e\xcc\xff\x93\x51\xf5\xff\xa8\xfa\x4f\xda\x4f\x99\x95\x27\x03\xcf\xf1\xb6\x78\x1d\xc1\x79\x25\x7d\x3d\xbb\xa4\x98\x3c\x1e\x8d\xbd\xa6\xbd\x89\xe0\xd0\x9e\x50\xfa\xbe\xf6\x0e\x3a\x6f\x28\xe9\x99\xec\xfb\xda\xeb\x2a\x3b\x82\xb7\x75\x99\xaf\xc7\x54\x7f\x49\xf5\xbf\x49\x37\x4b\x9a\x20\x83\xf4\x77\x35\x4b\x5a\x8a\xff\x65\x49\xdb\xc2\x88\xaa\x0f\xaa\x7a\x54\xd5\x45\x55\x7f\x49\xd5\xf7\xa9\xfa\x0c\x4f\xe9\xdb\xd9\xcc\x92\x36\xc0\x19\x2e\x89\x21\xb6\x45\xfd\xeb\xb4\x31\x0c\xe5\xf3\x09\xfe\xac\xdf\xcb\x33\x1c\xe5\x04\x4f\xf0\xb0\x5e\xa1\x45\x99\x07\x68\x71\x1f\x0f\x28\xc4\xe1\x19\xfe\x22\x02\xbe\x8b\xaf\x9f\xe0\x0c\x42\x6b\xf1\x43\x0e\xf3\x38\x3f\xa2\xa1\x7d\x9b\x57\xf9\x83\xfe\x1d\x5e\xe5\x56\x9e\xc3\xe0\x03\x21\xad\x1e\xd7\x5f\x20\xcf\x26\x7e\x4d\x9e\xad\xbc\x4f\x9e\x6b\xf8\x88\x3c\x7b\xb9\x4c\x9e\x21\xf2\x22\xcf\x7e\x0e\x89\x3c\x77\x50\x14\x79\xc6\x59\x10\x79\xee\x56\x78\x89\xbc\x98\xe6\x31\x76\x72\x90\xd8\x85\xb5\xa7\xdc\xb3\xea\x7d\xa2\xb5\xd1\x17\x79\x56\xb5\xb1\x0e\xbd\x17\x69\x6a\x21\xd6\xa9\x37\xa9\xaf\xe8\xad\x62\xc5\x0d\xf4\x2e\xaf\x9e\xf0\x93\x4d\xa7\x72\x72\x3f\x87\x8e\xb9\xd5\xa6\x6d\x7e\x81\xd1\xd9\xd9\xc5\xb1\xd1\xd2\x04\xe3\x77\x53\x6a\xf9\x81\x59\xcf\x17\x67\x98\x2a\x8e\x2d\x16\x8a\x73\x13\xe3\xf3\x33\x73\xc5\x89\x12\x47\xcd\xa0\x60\x04\x06\xf3\x5e\x6b\xca\x35\xaa\x14\xfd\x59\x23\x38\x3d\xe7\xba\x81\x59\x65\xd2\xb2\x4d\x6a\x66\xb0\x38\x6d\xd4\xc3\xce\x78\xd3\x0e\x9a\x9e\xa9\xe4\x51\xdf\x37\xeb\x65\xbb\xa5\x04\xa3\x53\xa8\xda\xb6\x23\xdb\x28\xec\x5c\xd3\x09\xac\xba\x49\xc1\x2c\x37\x6b\x35\xa3\x6c\x9b\xa3\x41\xe0\x59\xe5\x66\xb0\xea\x64\xde\x0a\x3a\xe1\x79\xc3\xab\x99\xc1\xa4\x67\xd4\xcd\x87\x5c\xef\xc1\xf5\xfa\x92\xda\x82\xe9\xf9\x96\xeb\xac\x1f\x2c\x3a\xa7\x5c\xaf\x6e\x04\x96\xeb\x18\xf6\x3f\xd5\x1a\x77\x9d\x53\x56\xad\xe9\x29\xbd\xd5\xe1\x71\xb7\xde\xb0\x6c\x05\xce\x99\xb6\x71\x4e\xf5\xfc\xf5\xe6\xb3\x9e\x5b\x6d\x56\x82\x8d\xfc\xd6\x1b\x86\xd3\x5a\x1d\x88\xe6\xaf\xf0\xc0\x2a\x5b\xb6\x15\x74\x8c\x16\x1d\x2b\xb0\x0c\xdb\x7a\x78\x6d\xbe\xf2\x11\x73\xcb\xa9\x31\xef\x86\xc7\x21\x46\xb5\xba\x38\x67\xfa\xae\x7d\x56\x4a\x47\xcd\x60\xb2\x69\xdb\xf2\x91\x21\x1f\xdf\xa4\xe7\xd6\xdb\xfc\x24\x58\x0a\x0c\x2f\x68\x36\xee\x72\xdd\x07\xaf\x34\xbd\xc7\xa9\x1b\x8e\x51\x33\xab\x05\xdb\xc6\x29\xdb\xae\x51\x35\xbd\x7c\xd5\xb6\x57\xd7\x4a\x5e\xe6\x38\x94\xda\xcc\xcc\x53\xb6\x59\x91\x09\xe1\x7e\xd3\x73\xd7\x12\x9e\x52\x5e\x98\x1e\x8b\x3a\x2b\x7e\xe9\x8c\x16\x52\x30\x3d\x8e\x85\xd0\x0a\xdf\x36\x9e\xaf\x04\xae\xac\x55\x53\x74\x82\xd9\xc0\x5b\x09\x54\xb0\x8c\x9a\xe3\xfa\x81\x55\xf1\x69\x78\x6e\xd9\xf4\xd7\x52\x28\x3a\x81\xe9\xb9\x8d\x92\xe9\x9d\xb5\x2a\xeb\x87\xc3\x87\x6b\x7a\xed\xf1\x70\x4d\x5a\x4e\xed\x98\x5b\x5d\xaf\x3e\x71\x2e\x30\x1d\xf9\x0c\x7c\xc2\xfc\x97\x1a\xb6\x15\xcc\x34\xd4\x92\x60\xe2\x9c\xe5\x07\x3e\xe3\xae\x53\x31\x02\x66\xca\x0f\x98\x95\x00\xa5\xa1\xf6\x4a\xc1\x3c\x65\x34\xed\xa0\xbd\x2e\x64\x52\xc6\x5d\x47\x7d\xa7\x8d\x36\x1a\x2b\xdd\xca\x0a\x14\xa9\xb5\xb7\x12\xd3\x46\x60\x9d\x35\xa7\xac\xb2\x67\x78\x2d\xe5\x72\xcc\xf0\xcd\x82\xe5\x99\x32\x35\x2d\xdc\xc6\xe2\xc4\x99\xa6\x21\x97\x13\xd3\x66\x30\x66\x1a\xcd\xa0\x15\xbd\x1e\xf4\xff\x83\xee\x3c\x55\x6c\xf9\x76\xdd\x33\x8d\x49\xc0\x18\x26\x06\x4d\x02\x5a\x4c\x61\x51\xc6\xa7\x80\x85\x07\xbc\xf6\xd7\xfe\x47\xf4\x97\x2f\x15\x9e\xdc\xff\xee\xa5\xeb\xbb\x53\x55\x62\x39\x21\x92\x7a\x0e\x11\xcf\x09\x91\xc9\x48\x31\x1d\x83\xde\x83\xa9\xed\xbd\xa3\x7a\xef\xc1\xde\x3b\x7b\x0f\xc4\x73\x9a\xd8\x95\xed\xc9\x09\xb1\x8a\x25\x55\xf7\x40\x3a\xbb\x69\x05\x3e\x90\xce\x76\x77\x25\xfa\xd3\xc9\x74\x3a\x9d\x8e\xa3\x69\xe9\x74\x0c\xa1\xa5\x13\xe8\x12\xd1\x73\xa4\xe3\x88\x74\xbf\x44\xd3\xe9\x78\x4e\xf4\x1e\x48\x27\xbb\xe2\xca\x20\x9b\x90\xfa\x5b\xb2\x5a\x22\xab\x83\xd4\xd8\x95\xee\xca\x69\xfd\x69\x3d\xf3\xe5\xe4\x2b\x87\x17\x1f\xcb\xfc\x2e\x75\xbb\x96\x48\xeb\x89\xfe\xb4\x0e\x22\x89\xd6\x7b\x40\x12\x49\xa0\x65\xa5\x1f\x11\xbd\x31\xaf\x95\x47\xe9\xbc\xd6\x77\xdc\x33\x1a\xd3\xae\x33\x71\xae\x62\xaa\xc7\x38\x7f\xda\x73\x1f\xf2\x45\x52\x44\x1f\xcb\x07\x04\xd9\xfc\xf4\xc4\xfc\xb8\xeb\x99\xa3\x8d\xc6\x8d\xd1\x26\xbc\xf3\xec\xfe\xfc\xb0\x60\x3e\xbd\xad\x7d\x28\x15\x2c\xbf\x61\x1b\xe1\x89\xd7\x23\x48\xb6\x57\x3b\x9b\x05\x5d\x73\xa6\x6d\x1a\xbe\x19\x0a\x23\xf9\x61\xf9\x83\x94\x20\x3e\x12\x76\xd7\x94\x2d\x6b\xe4\xc6\xd0\x6a\xff\xc9\x95\xbb\xca\x06\xe5\xd1\xa1\x4e\x69\x71\xdc\xf5\x0a\xb6\x7d\xcc\xb0\x1c\xea\x7e\xc5\xf5\x4c\x53\x6d\x6a\x59\x96\x07\xc8\xad\x0b\xf3\x6f\x2e\x42\x05\xcc\x86\xb7\xa8\x2b\x70\xf9\x0e\x1b\xde\x00\x27\xba\x3b\xdc\x7b\x04\xde\xe9\xb8\xbf\xbc\xa3\xc9\x2f\xc0\x05\x4a\x2c\xb2\xc0\x04\x73\x94\x28\x32\xc3\x34\x8b\x14\x99\x66\x32\xbc\x75\xf1\x8b\xd8\x47\x1f\x87\x7e\xc4\x15\x3e\x0f\x47\x52\x6c\xfd\xb5\x88\x82\xd2\x5a\xc0\xc0\x63\x12\x0b\x1b\x93\x22\x0e\xa7\x70\xd5\xf8\xf5\xca\x6a\x1e\x0f\x03\x07\x1f\x1b\x83\x00\x0b\x17\x27\xf2\xf0\x4a\x2c\x27\x3f\x3a\x29\x11\xe0\x61\xe1\x50\xdb\xc0\xd3\xdf\x85\xd4\x19\x6e\xff\x6e\xa1\x2c\x73\xc0\xcd\x74\x23\x18\xc7\xa5\x4e\x43\xc5\x68\x31\x8d\x41\x1d\x53\x79\x77\x28\x63\xe3\x62\x50\xc5\x54\xbb\x15\x6e\x57\x36\x2b\x31\x0a\x98\xf8\x54\x54\xec\xc6\x15\xdc\x36\xb2\x1d\x26\xd9\x61\xbb\xa0\x70\xbf\xc3\x66\x84\x3c\xc3\xed\x7f\x19\xab\x07\xa1\xe6\x11\x28\x5d\x07\x03\xbb\x83\xe1\xda\x18\xed\x73\x07\x18\x54\xdf\x2b\x53\x98\xd4\x94\x95\x9c\x65\x83\x96\x62\x5a\xe3\x34\x41\xb4\xb4\xc7\x54\x8c\x99\x08\xb7\xa2\x18\x2b\x1c\x9d\xcf\x14\x2b\xcc\xe3\x2c\x1e\x2e\x55\x9a\x54\x08\x3e\x35\x8f\xc3\x24\xd6\xd9\xac\xcd\xc8\x48\x47\x2e\x6e\x53\xb9\x1b\xc5\xc7\xc7\xa4\xae\x3c\xb6\xc8\x7d\x82\x4d\x68\xf7\x1f\x53\x72\xe1\x1d\xef\x7b\x77\x7c\xde\x44\xfe\x5b\x3e\x8f\xf2\x8f\x00\x00\x00\xff\xff\x9e\xef\xfe\x05\x00\x14\x00\x00")

func nbloaderNbloaderDllBytes() ([]byte, error) {
	return bindataRead(
		_nbloaderNbloaderDll,
		"nbloader/nbloader.dll",
	)
}

func nbloaderNbloaderDll() (*asset, error) {
	bytes, err := nbloaderNbloaderDllBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nbloader/nbloader.dll", size: 5120, mode: os.FileMode(438), modTime: time.Unix(1647092181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nbloader/nbloader.dll": nbloaderNbloaderDll,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nbloader": &bintree{nil, map[string]*bintree{
		"nbloader.dll": &bintree{nbloaderNbloaderDll, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
