// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// nbloader/nbloader.dll
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nbloaderNbloaderDll = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6c\x1c\xd5\x7a\xff\x9d\x99\xd9\xd9\x3f\x8e\x27\x9e\x5d\xdb\x71\x12\xdb\xd9\x10\x3b\x2c\x71\xb2\xd8\x0e\x49\xe3\xd0\x34\xb1\xbd\x76\xd8\xd4\xb1\x5d\xaf\xe3\x04\x44\x71\x66\x77\x4f\xec\x81\xd9\x99\x65\x66\x36\x78\x29\x72\x8d\x4a\xab\x88\x0a\x68\xf3\x90\x92\x94\xaa\x8a\xa5\x56\xa8\xad\x54\x22\xa1\xf2\x47\x54\x4a\x0b\x55\x4b\x25\xaa\x82\xb8\xf7\x0a\x5e\x12\xc4\x03\xca\x15\xba\xf7\xea\x2a\x0f\x17\x2e\xc2\x57\xe7\xcc\xec\x1f\xdb\x21\x81\x27\xae\x74\x39\xf6\x7e\xe7\x7c\xdf\xf9\xfe\x9f\x73\xbe\xb3\x7b\x8e\x3f\xf4\x57\x10\x01\x48\x00\x56\x56\x80\xd7\xe1\xb5\x23\xb8\x73\x5b\x02\xa0\x6c\x7b\x53\xc1\xab\xe1\xf7\xb6\xbf\x4e\xc6\xde\xdb\x3e\x3d\xaf\x3b\xf1\xa2\x6d\xcd\xd9\x5a\x21\x9e\xd3\x4c\xd3\x72\xe3\x59\x1a\xb7\x4b\x66\x5c\x37\xe3\xa9\x89\x4c\xbc\x60\xe5\x69\xb2\xb1\x31\xd2\xe5\xeb\x98\x1c\x01\xc6\x88\x88\x0f\xa7\xde\xf9\xa2\xa2\xf7\x3a\xee\x8a\x37\x90\x5e\xa0\x19\x80\xec\xd1\xcc\x7e\x00\xf1\xaa\x63\x4d\x7c\x2c\x78\x7e\x03\xb5\x9e\x3b\x25\x78\x43\x11\xa7\xff\x9c\xb1\xb2\xff\x5a\x5f\xed\x78\x6b\xef\x07\x26\xfc\x80\xdb\xc5\x5b\x04\x79\x1a\xd8\xc0\xfa\x7e\xa0\xfd\x5b\xe4\xa4\xda\xe2\x40\xa8\x0e\x0d\xc5\x81\x07\xea\xf0\xa4\x4b\x17\x5c\x00\x6e\xd4\x8f\xab\xb9\xe6\x77\x9d\x8a\xd3\x49\xdb\xb1\x73\xf0\x7d\x3b\xe2\x07\xda\xba\x9a\xef\x08\x70\x24\x69\x53\xc3\xca\xf9\xbe\x9e\xf6\x75\x6d\x59\xc7\x37\xb4\xd6\xcd\xc9\x7e\xaf\x7f\x80\x8b\x04\x30\xd6\x0d\xbc\xba\x01\x20\xdf\x25\xd6\xba\xf6\x6f\x89\x06\x20\xd2\xfc\xb5\x2c\x01\xb2\xb3\x01\x88\x58\x8d\x40\xa4\x42\x0d\x30\xaa\xc2\xa8\x1b\x81\xc8\xae\x4e\x21\xd1\xc4\x7a\x20\xd6\x2b\x41\x07\xb7\xab\x2e\xca\x80\xb4\xe7\x61\x47\x05\x22\x4b\x6c\x6c\x13\xa0\x98\x88\x02\x91\xee\x3d\xd2\xce\xe6\x9e\x80\x15\xe3\x63\x79\xa7\x7d\x08\x28\x6e\x7b\xaa\xd5\x6a\x06\x22\x91\xd6\x86\x9e\xb8\x1c\xbc\xb4\xed\xa0\x87\x6f\xe0\x8a\x42\xad\x97\x42\x9b\x2e\x59\x2d\x40\x24\xb8\xe9\x54\x43\x50\x7e\x5e\xef\xff\x98\xcf\xec\x82\x67\xf7\x51\xc2\xd3\xa5\x2e\x06\x01\x29\xd2\xda\x70\x60\x8a\x00\x72\xf0\xd2\x86\x10\x57\x9f\x68\x05\x22\x07\x0f\x12\x20\x94\xd8\x04\x44\xf6\x44\x17\x09\x73\xea\x30\x50\x0c\x25\xda\x80\x48\x0f\x09\x35\x8a\xd6\xe6\x7a\x9f\x62\x92\x2a\xc5\x02\x6a\xc0\xd3\xb0\x05\x88\xec\x56\xec\x61\xa0\xa8\x06\x12\x5b\x81\x48\x2c\x20\x5a\xed\x40\xc4\x3e\xc1\xe6\x39\x45\xf6\x04\x83\x8b\x01\x40\x1a\x38\x07\x40\x95\x63\x21\x55\xaa\x53\xd1\xa4\x7a\x66\x55\xcf\x6e\x2c\x94\x10\x01\x59\x0d\x25\x08\xd0\x13\x0b\xab\xe1\x3d\x41\x4f\x49\x78\x5b\xf8\xb9\x66\x80\x74\xb7\x86\x97\xbb\x37\x71\x99\xe5\xee\x36\x35\xb0\xdc\xbd\xd9\x47\xb6\xa8\xf2\x72\xf7\x56\x1f\x69\x57\xc3\xcb\xdd\x1d\x3e\xd2\xa9\xca\xcb\x89\x4e\xb6\x68\xdb\x98\x8d\x60\x4f\xef\xd6\x6f\xa1\xab\x5e\x42\x0d\x26\xe2\xcc\xdd\xb0\xa0\x06\xad\xed\x6c\x81\x2b\x99\x3f\xfc\x0f\x5f\xaf\xac\x34\xfb\xeb\xfd\x29\x3f\xa3\x75\x79\xff\x6f\xac\xcf\xfb\xbf\xe2\x0e\x79\x4f\xc8\x80\x1c\x93\x5a\x63\x81\x9e\x3f\x51\x25\x35\x70\x69\x75\x22\x77\xef\x5b\xe5\xfd\xac\xe7\xfd\xa2\x04\x48\xdf\x1c\x40\x4f\x73\xd8\xcb\xb3\xcc\xed\xac\x09\x4b\x51\x83\xd1\x50\xe2\x2e\x36\x14\xd5\xd0\x2e\x35\xb0\xe9\x14\x5b\x6a\x55\x7a\x5e\x3f\xfc\xe4\xca\xca\x4a\x35\xd8\xde\x95\x95\x95\xc5\x1d\x7c\x83\xb3\x78\x37\x12\x7e\x7c\x55\xa7\x8b\x6d\xd6\x44\x37\xd3\xbc\x93\x81\xbb\x2b\xa3\x86\xdd\xe3\xb2\x60\x25\x80\x88\xc0\x37\x86\x75\x0f\x4b\xc1\x87\xec\x6c\xda\xe5\x2a\xfe\x0e\x4b\x93\x50\xdb\x39\x5c\x40\xf6\x38\x6a\x84\x03\x7f\x07\x20\x58\x55\x28\xdb\x7f\x06\x14\x85\xda\xbc\x60\xff\x65\x45\xe3\x9e\x92\xec\x61\x75\xea\x3c\x76\x8f\xda\x56\xa1\xf6\x8c\x7d\xb3\xb6\x8b\x55\x6d\x77\xcb\x1e\xb6\x5e\xdb\xc5\x55\xda\x64\x6b\x97\x9f\x1b\x11\x6f\xfa\xf5\x23\xd1\x53\x7f\x8a\x96\xf8\x82\x5f\xbe\xed\xe9\x5f\x62\xb7\x80\xfd\xf6\xed\x79\x44\xc6\xf3\xc5\xed\x79\xd8\x96\x58\xe4\x8c\xb5\x03\xa7\x7a\x84\x4d\xc4\x27\xf4\x90\xd6\x25\xb6\xab\x16\x99\xd1\x6d\xf7\x7b\x75\x66\x29\xe8\x15\x93\xa1\xcc\xb1\x21\xe2\x57\x4e\x56\x87\xcf\xde\x97\xec\x4d\xee\xed\xdd\xdb\x37\xc0\x28\x01\x18\x00\x3e\x17\x81\x1d\x8b\xc0\x29\x09\x38\x12\x00\x76\x64\x5c\x5b\x37\xe7\x1c\xc6\xf1\x62\x18\x88\x13\x60\xc7\x89\x0c\x5e\x8f\x78\xf7\xd4\x8e\xa3\x27\xd2\x29\x00\xff\x13\x01\x3e\x67\x73\x43\x86\x95\xf5\x73\x25\x00\xe4\x64\xcb\x72\x38\xcc\x2e\x9a\x2f\xc9\x5e\x76\x2f\x30\xeb\x1d\xde\xb9\x42\xd0\xff\x04\x00\xf4\x00\x88\xf8\xd7\x07\xa9\xfb\x54\xf0\x20\x2a\x35\xff\x2d\xc1\xeb\x65\x5c\x21\xd7\x44\x19\xa2\xc0\x60\x03\xf9\x47\x71\x23\x56\x58\xb9\xc1\x7e\xb2\x5b\x90\xf1\x53\xb2\x53\x94\x71\x9e\xc3\x09\x0e\x0d\x0e\xdf\xe7\x70\x1b\x87\x2f\x48\xd7\x85\x08\x54\xb8\x90\x71\x43\xda\x29\x2a\x78\x53\x3a\x24\xca\xf8\x18\x3b\xc5\x08\x08\xa7\x77\xe2\xba\x20\xe3\xff\x24\x06\x4f\x0a\x0c\x66\xa5\xeb\x42\x14\xe7\x84\x63\x88\x20\x21\x31\x9e\x10\x5c\xb4\xe2\x2d\x1c\xc3\x16\xfc\x5a\xba\x2a\xca\xf8\x7b\xf1\xba\xd0\x89\x1b\xc2\x55\xb1\x13\x31\xf1\x2a\xbf\xb9\xbb\xb9\xdf\xde\x0a\x34\xe1\x82\x00\xf4\x71\x6c\x89\x34\x21\x23\xee\x0b\x30\x4c\xc4\x7e\x0c\x22\x4a\xf6\x63\x9a\xc3\x7f\xe2\x30\xc9\xe1\xcb\x68\x21\x2a\xd2\x42\x1b\xd9\x8f\x37\xc4\x38\x99\x64\xf7\x32\x2e\x60\xbb\xd0\x45\x08\x16\x39\xf6\x17\x6d\xe7\x45\x19\x04\xe7\xbc\xb9\xd0\xa8\x90\x20\x04\xd8\xee\x71\x3e\x29\xf6\x11\x82\x85\xbb\x3c\x8c\x8a\x07\x89\x88\xf9\x1d\x1e\x76\x48\x1a\x24\x01\x3c\xc3\xbf\xf8\xfc\x75\xdb\x8b\x62\x17\x91\xb9\xb7\x1f\x49\x6c\x25\x3f\xe3\xe3\x5f\xf2\xf1\x4d\x3e\xbe\x89\x30\xce\x8b\x04\x2a\x98\xc5\xcd\x38\x2f\x46\x70\x0f\xce\x8b\x4d\xe8\xe3\x70\x80\xc3\x41\x0e\xd3\x1c\xfe\x11\x87\x0f\x72\x58\xc6\x4b\x52\x0b\x36\xe0\xbc\xd8\x8d\x32\x1e\x11\x7a\xd0\xec\x8f\x97\x85\x21\x68\x5c\x67\x3b\x87\x17\x61\xe0\x8f\xa1\xe1\x84\x90\xc5\x65\x5c\x90\xce\xa0\x1d\xef\x0a\x26\x2e\x63\x6b\xe0\x19\x5c\xc1\xdf\xe2\x59\x5c\xc6\x39\xe9\x05\x3c\x8d\xff\x05\xe3\xb9\x3b\xf0\x0c\xa7\x5c\xc0\xd3\xf8\x0f\x64\xf1\x06\x5e\x96\x5e\xe2\x94\x2b\xb8\x02\x43\x78\x0d\xef\xa2\x24\x3d\x8b\x32\x16\x84\xb7\xf0\x3e\x5e\xc0\xff\xe3\x23\x1c\x10\x7f\x82\x2e\x6e\xf1\x13\x3c\x25\xdd\xc0\x0d\x7c\x26\xfc\x0c\x9f\x20\x8f\x1b\xe8\xc2\xdf\xe0\x26\x2e\xe3\x39\xe1\x4b\x74\xe1\x13\x69\x05\x17\x11\x0e\x04\x48\x12\x0d\x98\x24\x49\xc4\xf0\x20\x49\x62\x2b\x16\x48\x12\x3b\xf0\x34\x49\xa2\x07\xaf\x91\x24\xf6\xe2\xbf\x48\x12\xf7\xe3\x03\x92\xc4\x30\xae\x91\x24\xfe\x90\xd3\x33\x78\x8d\x8c\xe3\x2c\xfe\x13\x1f\x43\xe4\xfb\xe1\x98\x70\x94\x08\x10\x21\x62\x0b\x06\x30\x83\x4f\x21\x2d\x55\xf6\x4a\xa5\x3d\xcc\xce\x3a\x84\x2a\x2d\x4c\xbe\xe2\xbd\x54\xc7\x17\x26\x13\x52\x85\x86\x2a\xed\x90\xe8\xd1\xea\x65\x15\x69\xbd\xec\x07\xc2\x7a\xbe\xab\xbe\xac\x77\x66\x3d\xda\x4d\xce\x77\x3f\xfe\xc5\x23\x8c\xe9\x8e\x7b\xba\x0f\xe9\x29\xaa\xe5\x27\x4c\xa3\x9c\xd2\x73\xae\x6e\x99\x9a\x5d\x3e\xdd\x8f\xd1\x92\x99\x3b\xbd\x17\xbf\x7f\xdc\xca\x97\x0c\xfa\x07\xc8\xcc\x6b\x36\xcd\x4f\x95\x4c\x57\x2f\xd0\xc1\x62\x31\x9d\xc2\xe0\xe4\xe4\xec\xd0\x60\x66\x04\x99\xb2\xe3\xd2\x42\x32\x3d\x81\xb1\xf4\xd0\x6c\x2a\x3d\x35\x32\x3c\x3d\x31\x95\x1e\xc9\x60\x8e\xba\xb3\x13\x99\x53\x38\x4a\xdd\x94\xe6\x6a\x15\xce\x61\xcb\x30\x28\x37\xe6\x24\x8f\x52\x93\xda\x7a\x0e\xd3\x76\x79\xcc\xd2\xf2\x18\xcc\xe7\x91\x76\x26\x35\x77\x7e\xca\xb2\x5c\xca\x90\x55\xb6\x8f\x5b\x79\x8a\x51\xdd\xa0\x5c\xf9\xb8\x56\xf0\x06\xc3\x25\xc3\x2d\xd9\x94\xe3\x83\x8e\x43\x0b\x59\xa3\xcc\x11\xad\x1e\xc9\x1b\x86\xc9\x7a\xdf\x0f\x5f\x25\x52\x34\x5b\x9a\x9b\xd3\xb2\x06\x1d\x74\x5d\x5b\xcf\x96\xdc\x9a\x92\x69\xdd\xad\x27\x4f\x6b\xf6\x1c\x75\x47\x6d\xad\x40\x9f\xb0\xec\xc7\xd6\xf3\x33\xd7\x66\xa8\xed\xe8\x96\xb9\x7e\x32\x6d\x9e\xb1\xec\x82\xc6\xd3\x6c\x7c\x23\xd7\xb0\x65\x9e\xd1\xe7\x4a\x36\xe7\xab\x4d\x0f\x5b\x85\xa2\x6e\x70\xe2\x14\x35\xb4\x05\x3e\x72\xd6\x8b\x4f\xda\x56\xbe\x94\x73\x6f\xa5\xb7\x50\xd4\xcc\x72\x6d\xc2\x8f\x9f\xd3\x5d\x3d\xab\x1b\xba\x5b\x37\x9b\x36\x75\x57\xd7\x0c\xfd\xc9\xb5\xf9\x4a\xfa\x9e\xeb\xe6\x1c\xcf\xbd\x63\x17\x8e\x6b\xc5\x22\x43\xa7\x2d\xef\xe6\x81\x96\xcf\xcf\x4e\x51\xc7\x32\xce\x32\xec\x28\x75\x47\x4b\x86\xc1\x56\x15\x6c\x95\x47\x6d\xab\x50\x75\x97\x11\x47\xcc\xbc\x73\x52\x77\xe7\x91\x71\x35\xdb\x2d\x15\x1f\xb0\xac\xc7\x56\xeb\x38\x61\x16\x34\x53\x9b\xa3\xf9\x94\x61\xc0\xcc\x1a\x96\x96\xa7\x76\x32\x6f\x18\x70\xa8\x3b\x9b\x76\x69\xa1\xb6\x0f\x93\x6c\x11\x3c\x0c\x69\x67\x22\x33\x69\x68\x2e\x4b\xfc\xda\x38\xd2\xa6\x4b\x6d\xab\x98\xa1\xf6\x59\x3d\x47\x9d\x0a\xbd\x6e\x95\xaa\x12\xf4\x8c\xbf\x63\xf1\x10\xb5\xad\xb5\x8a\xc6\xb8\x37\x18\x1f\xf2\x07\x15\xff\x50\xef\xb5\x17\x0a\xb5\x71\xdc\x23\x55\x12\x50\xa5\x27\x73\xae\xc5\x20\xef\xd2\xa6\x3b\xe9\xda\x15\x43\x29\x5d\x9b\x33\x2d\xc7\xd5\x73\x0e\x8a\xb6\x95\xa5\xce\x1d\x62\x59\x3b\xed\x6d\x1e\x6a\x57\xe7\xbd\x3d\xaf\x9b\x73\xec\x40\xad\x63\x1f\x59\x70\xa9\xc9\xd6\xd8\x41\xed\xb0\xd6\x11\x53\x63\x63\xec\x40\xcd\x68\xb6\xee\x6d\xc3\x5b\x1c\x6d\x78\x5b\x21\x53\x34\x74\x77\xa2\xe8\x91\x46\x16\x74\xc7\x75\xf8\xae\x39\xa9\x9b\x79\xeb\x09\xa6\xdf\xcc\x69\x2e\x26\xb2\x8f\xd2\x9c\x0b\xce\xcd\xe7\x53\xf4\x8c\x56\x32\x5c\xb6\x77\x66\x34\xa3\x44\x27\xec\x0a\xa5\x92\x38\x96\xec\x61\xcb\xe4\xbf\x79\x07\x8b\xc5\xca\x30\xe7\xf7\xd3\xd6\xa0\x6d\x6b\xe5\x2a\x7b\xb5\x14\x60\x5c\x73\xf5\xb3\x74\x4c\xcf\xda\x9a\x5d\xe6\xc6\x86\x34\x87\xa6\x74\x9b\xb2\xd4\x97\x61\x15\x67\x47\x1e\x2f\x69\xec\x38\xb0\x71\xda\xa4\x15\x6c\x9c\xba\x43\x54\x2b\xb9\x65\x56\x48\xc7\x41\xe1\x62\x08\x14\x1a\x4a\x70\x51\x46\x06\xf3\xd0\x60\x83\x22\x8f\x29\x94\x60\xc2\x85\x8e\x02\x28\x8e\x43\x43\x11\x45\xe8\x30\x31\xc7\xae\x08\xf1\x5e\x40\x35\x60\x21\x07\x0d\x06\x28\x1c\xdc\x0b\x84\x93\xc8\xc3\x60\xdf\xe9\x36\xdf\x0b\x07\x36\x0a\x98\x85\x09\x8d\xeb\x39\x0b\xea\xf3\x50\x2c\x80\x02\x41\x03\x3a\xb2\x40\x23\x93\x2a\xc3\xc7\x82\x49\x38\xb0\x80\xed\xeb\xfd\x1b\xe3\x1c\x0e\x52\xd0\x61\x03\xfb\xbe\x5b\x04\x16\xf2\xcc\x6a\xc7\x7a\xa9\x41\x1e\x5b\x1a\x29\x20\x60\x32\xdb\x00\xae\xb5\xfc\xde\xdb\xd7\xfe\xb9\x79\xfc\xe2\x2f\x96\xb7\xfe\xf8\x57\xdd\x4f\x41\x8a\x13\x12\x12\xe3\x20\x81\x38\x21\xaa\xca\x50\x76\x9b\x45\x0f\x45\x5a\xa2\x69\x31\x7a\x28\x3a\x18\x1d\x08\xc4\x05\xd2\xde\xd6\x18\x27\xa4\x46\x0b\xf1\xe1\x80\xd2\xd6\x50\x21\x0f\x28\x6d\xc1\xa0\xd8\xa1\x84\x3a\x14\xb9\x25\xba\x4f\x50\x14\x09\xa4\x5d\x11\xe3\x50\x82\x71\xa1\x43\x11\xd5\x13\xc1\xb8\x40\x62\x88\x91\xc6\x60\xa4\x43\x09\x29\x7e\x0b\x40\xf0\x98\x05\x45\x86\xe8\x53\x14\x45\xd9\xd8\x24\x08\x9d\xa4\x25\xaa\x09\x9d\xe8\x24\x9d\x90\x22\x02\x9b\x22\x4a\x07\x63\x56\x94\x40\x9c\x44\x07\x94\xc6\x60\x98\xeb\xe2\xa0\x4d\x66\xba\x9a\xda\x04\xb9\x2d\x14\x14\x5a\xa2\x23\x44\x11\x02\xbc\x63\x3f\xc6\x1e\x0f\x80\x08\xea\xe3\x2c\xd2\x18\x0b\x5c\x50\x02\x71\x74\xc4\xd8\x65\xac\x84\x5e\x39\x3c\xfb\xa7\xea\x8f\x22\x07\x05\x59\x11\x64\x21\xe8\x87\x20\xca\x1d\x8a\x08\x90\x10\xe0\x11\x42\x10\xa2\x03\x2c\x05\x32\x84\xb6\xe8\x00\xf3\xa7\x43\x51\x42\xa1\xca\x34\xf1\x9f\x82\x3a\xd9\x77\x81\x69\xa1\xf5\xa4\xad\x15\xc7\xd9\x29\xcd\x51\x7e\xda\xa6\xe7\x6d\xeb\x09\x87\x84\x88\xff\x02\xb4\x8f\xa0\x2d\x39\x3e\x32\x3d\x6c\xd9\xec\x06\xdf\xed\x57\xf1\x43\x67\xf7\x26\x7b\x09\xa6\x95\xe6\xea\xad\x96\xd2\x9d\xa2\xa1\x79\x57\x66\x23\x41\xa8\x5a\xce\xb0\x81\x20\x38\x45\x0d\xaa\x39\xd4\x43\xfa\x92\x7d\xc9\xde\x64\x2f\x10\x21\x08\x70\x64\xed\xdb\x4d\xd3\x1a\x3c\xd5\x5f\x1b\x3f\x52\x79\x7f\xbb\x45\x9b\xec\xaf\xc7\x66\x87\x2d\x3b\x65\x18\xc7\x35\xdd\x44\xc1\xc9\x59\x36\xa5\xbc\xf8\xb3\xb6\xd2\x8d\xf8\x3a\x33\x3f\xb4\xdf\x9a\x46\xf8\xe2\xb4\x79\xaf\xa8\xab\xe8\xec\xfb\x6a\xef\x2d\xe8\xf0\xdf\x0e\x4f\x1d\x01\xae\xd6\xbd\x5f\x5e\x15\xee\x03\x30\x83\x0c\x66\x31\x83\x11\x4c\x21\x83\x34\x26\x30\x8e\x59\xa4\x31\x8e\x51\xef\xd5\x15\xff\x2e\xfd\xfc\x6b\x4f\x3f\xa9\xb3\x04\x1c\xf6\xf5\x48\xeb\x9f\x45\x59\xed\x02\xc1\x0c\xaf\x7e\xa3\xd0\x79\x4d\x4e\xc3\xc4\x19\xbf\x9e\x75\x71\xa9\x69\xd8\xd0\x60\xc2\x81\xe1\x57\x65\x0b\xa6\xaf\xe1\x15\x29\xce\x7e\x3c\x23\x03\x17\xb6\x5f\xe9\xd7\x6b\xfa\x8a\x30\x9e\xde\xea\xdf\x7d\xc8\xb2\x1c\xa0\x1f\x61\x10\x0c\xc3\x42\x01\x45\x6e\xa3\x8c\x71\x68\xbc\xf6\xb2\x66\x22\x0b\x76\x5f\x68\xbc\x0a\xdb\x9c\x76\x90\xcb\x54\x6c\xa4\xf8\x2d\x92\xe3\xb6\x8b\xab\x7c\xbb\x95\x6c\x2f\x42\x75\xb2\x33\x9c\xee\xd4\xc9\xf4\x21\xc9\x3f\xbd\xfc\xc3\x6c\x35\x82\xf0\x38\x5c\xce\x6b\xf2\x7b\xab\xe6\xe1\x5a\x1b\xd5\x9b\x0c\x40\x82\xff\x36\x19\x03\xc5\x1c\x97\x62\x51\x16\x51\xe6\x9e\xce\x61\x1e\xae\x5f\x06\x86\xb8\x8d\x09\x9f\xae\xfb\x36\x2a\x3e\x9a\xdf\xca\x96\x97\xc7\x49\xd8\xfc\xbe\x2a\x21\x07\xf7\x8e\x79\xec\x85\xbc\x4e\x66\x6d\x46\x6a\xf9\x00\x0e\xf0\xdc\x0d\xc2\x81\x03\x8a\x02\xd7\x58\x46\xfc\x36\x32\x9e\xdc\xef\x4c\xeb\xf5\xde\xaa\x8a\xfd\xdf\xb7\x23\x3f\xb4\xef\xa3\xfd\x26\x00\x00\xff\xff\xb7\x92\xf6\x2d\x00\x1c\x00\x00")

func nbloaderNbloaderDllBytes() ([]byte, error) {
	return bindataRead(
		_nbloaderNbloaderDll,
		"nbloader/nbloader.dll",
	)
}

func nbloaderNbloaderDll() (*asset, error) {
	bytes, err := nbloaderNbloaderDllBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nbloader/nbloader.dll", size: 7168, mode: os.FileMode(438), modTime: time.Unix(1664963932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nbloader/nbloader.dll": nbloaderNbloaderDll,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"nbloader": &bintree{nil, map[string]*bintree{
		"nbloader.dll": &bintree{nbloaderNbloaderDll, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
